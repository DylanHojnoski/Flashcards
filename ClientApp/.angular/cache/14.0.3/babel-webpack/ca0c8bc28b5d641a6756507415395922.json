{"ast":null,"code":"import _asyncToGenerator from \"/home/dylanh/Documents/CodeProjects/Flashcards/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(service, _ngZone, router, fb) {\n    this.service = service;\n    this._ngZone = _ngZone;\n    this.router = router;\n    this.fb = fb;\n  }\n\n  ngOnInit() {\n    // @ts-ignore\n    window.onGoogleLibraryLoad = () => {\n      // @ts-ignore\n      google.accounts.id.intialize({\n        client_id: '',\n        callback: this.handleCredentialResponse.bind(this),\n        auto_select: false,\n        cancel_on_tap_outside: true\n      }); // @ts-ignore\n\n      google.accounts.id.renderButton( // @ts-ignore\n      document.getElementById(\"buttonDiv\"), {\n        theme: \"outline\",\n        size: \"large\",\n        width: \"100%\"\n      }); // @ts-ignore\n\n      google.accounts.id.prompt(notification => {});\n    };\n  }\n\n  handleCredentialResponse(response) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.service.LoginWithGoogle(response.credential).subscribe(x => {\n        localStorage.setItem(\"token\", x.token);\n        /*this._ngZone.run(() => {\n          this.router.navigate\n        })*/\n      }, error => {\n        console.log(error);\n      });\n    })();\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[\"id\", \"buttonDiv\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"Login with Google\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"div\", 0);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;AAWA,OAAM,MAAOA,cAAP,CAAqB;EAEzBC,YAAoBC,OAApB,EACUC,OADV,EAEUC,MAFV,EAGUC,EAHV,EAGyB;IAHL;IACV;IACA;IACA;EAAoB;;EAE9BC,QAAQ;IACN;IACAC,MAAM,CAACC,mBAAP,GAA6B,MAAK;MAClC;MACEC,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmBC,SAAnB,CAA6B;QAC3BC,SAAS,EAAE,EADgB;QAE3BC,QAAQ,EAAE,KAAKC,wBAAL,CAA8BC,IAA9B,CAAmC,IAAnC,CAFiB;QAG3BC,WAAW,EAAE,KAHc;QAI3BC,qBAAqB,EAAE;MAJI,CAA7B,EAFgC,CASlC;;MACET,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmBQ,YAAnB,EACF;MACIC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAFF,EAGI;QAAEC,KAAK,EAAE,SAAT;QAAoBC,IAAI,EAAE,OAA1B;QAAmCC,KAAK,EAAE;MAA1C,CAHJ,EAVgC,CAelC;;MACEf,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmBc,MAAnB,CAA2BC,YAAD,IAA2C,CAAG,CAAxE;IACD,CAjBD;EAkBD;;EAEKX,wBAAwB,CAACY,QAAD,EAA6B;IAAA;;IAAA;MACzD,MAAM,KAAI,CAACzB,OAAL,CAAa0B,eAAb,CAA6BD,QAAQ,CAACE,UAAtC,EAAkDC,SAAlD,CACHC,CAAD,IAAU;QACRC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,CAAC,CAACG,KAAhC;QACA;;;MAGD,CANG,EAOHC,KAAD,IAAe;QACbC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACD,CATG,CAAN;IADyD;EAa1D;;AA1CwB;;;mBAAdnC,gBAAcsC;AAAA;;;QAAdtC;EAAcuC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BL,4BAAK,CAAL,EAAK,IAAL;MACMA;MAAiBA;MACrBA;MACFA","names":["LoginComponent","constructor","service","_ngZone","router","fb","ngOnInit","window","onGoogleLibraryLoad","google","accounts","id","intialize","client_id","callback","handleCredentialResponse","bind","auto_select","cancel_on_tap_outside","renderButton","document","getElementById","theme","size","width","prompt","notification","response","LoginWithGoogle","credential","subscribe","x","localStorage","setItem","token","error","console","log","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/dylanh/Documents/CodeProjects/Flashcards/ClientApp/src/app/components/login/login.component.ts","/home/dylanh/Documents/CodeProjects/Flashcards/ClientApp/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, NgZone, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { CredentialResponse, PromptMomentNotification } from 'google-one-tap';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private service: AuthService,\n    private _ngZone: NgZone,\n    private router: Router,\n    private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    // @ts-ignore\n    window.onGoogleLibraryLoad = () => {\n    // @ts-ignore\n      google.accounts.id.intialize({\n        client_id: '', \n        callback: this.handleCredentialResponse.bind(this),\n        auto_select: false, \n        cancel_on_tap_outside: true\n      });\n\n    // @ts-ignore\n      google.accounts.id.renderButton(\n    // @ts-ignore\n        document.getElementById(\"buttonDiv\"),\n          { theme: \"outline\", size: \"large\", width: \"100%\"}\n      );\n    // @ts-ignore\n      google.accounts.id.prompt((notification: PromptMomentNotification) => {})\n    };\n  }\n\n  async handleCredentialResponse(response: CredentialResponse) {\n    await this.service.LoginWithGoogle(response.credential).subscribe(\n      (x:any) => {\n        localStorage.setItem(\"token\", x.token);\n        /*this._ngZone.run(() => {\n          this.router.navigate\n        })*/\n      },\n      (error :any) => {\n        console.log(error);\n      }\n\n    );\n  }\n\n}\n","<div>\n  <h2>Login with Google</h2>\n  <div id=\"buttonDiv\"></div>\n</div>\n"]},"metadata":{},"sourceType":"module"}