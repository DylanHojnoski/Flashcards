{"ast":null,"code":"import _asyncToGenerator from \"/home/dylanh/Documents/CodeProjects/Flashcards/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = \"User\";\n\n    this.signOutExternal = () => {\n      const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n      return this.httpClient.post(environment.apiUrl + \"/\" + this.url + \"/Logout\", {\n        headers: header,\n        withCredentials: true\n      });\n    };\n  }\n\n  LoginWithGoogle(credentials) {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.post(environment.apiUrl + \"/\" + this.url + \"/LoginWithGoogle\", JSON.stringify(credentials), {\n      headers: header,\n      withCredentials: true\n    });\n  }\n\n  GetCurrentUser() {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.get(environment.apiUrl + \"/\" + this.url + \"/GetCurrentUser\", {\n      headers: header,\n      withCredentials: true\n    });\n  }\n\n  UpdateUser(user) {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.put(environment.apiUrl + \"/\" + this.url, user, {\n      headers: header,\n      withCredentials: true\n    });\n  }\n\n  GetUserByName(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n      return fetch((environment.apiUrl + \"/\" + _this.url + \"/GetUserByName/\" + user.name, {\n        headers: header,\n        withCredentials: true\n      }));\n      return _this.httpClient.get(environment.apiUrl + \"/\" + _this.url + \"/GetUserByName/\" + user.name, {\n        headers: header,\n        withCredentials: true\n      });\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,WAArB,QAAwC,sBAAxC;AAIA,SAASC,WAAT,QAA4B,8BAA5B;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAEtBC,YAAoBC,UAApB,EAA0C;IAAtB;IADZ,WAAM,MAAN;;IAGR,uBAAkB,MAAK;MACrB,MAAMC,MAAM,GAAG,IAAIL,WAAJ,GAAkBM,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAf;MACA,OAAO,KAAKF,UAAL,CAAgBG,IAAhB,CAAqBN,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAKC,GAAhC,GAAsC,SAA3D,EAAuE;QAAEC,OAAO,EAAEL,MAAX;QAAmBM,eAAe,EAAE;MAApC,CAAvE,CAAP;IACD,CAHD;EAF+C;;EAO/CC,eAAe,CAACC,WAAD,EAAoB;IACjC,MAAMR,MAAM,GAAG,IAAIL,WAAJ,GAAkBM,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAf;IACA,OAAO,KAAKF,UAAL,CAAgBG,IAAhB,CAAqBN,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAKC,GAAhC,GAAsC,kBAA3D,EAAgFK,IAAI,CAACC,SAAL,CAAeF,WAAf,CAAhF,EAA6G;MAAEH,OAAO,EAAEL,MAAX;MAAmBM,eAAe,EAAE;IAApC,CAA7G,CAAP;EACD;;EAEDK,cAAc;IACZ,MAAMX,MAAM,GAAG,IAAIL,WAAJ,GAAkBM,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAf;IACA,OAAO,KAAKF,UAAL,CAAgBa,GAAhB,CAAoBhB,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAKC,GAAhC,GAAsC,iBAA1D,EAA8E;MAAEC,OAAO,EAAEL,MAAX;MAAmBM,eAAe,EAAE;IAApC,CAA9E,CAAP;EACD;;EAEDO,UAAU,CAACC,IAAD,EAAW;IACnB,MAAMd,MAAM,GAAG,IAAIL,WAAJ,GAAkBM,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAf;IACA,OAAO,KAAKF,UAAL,CAAgBgB,GAAhB,CAAoBnB,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAKC,GAApD,EAA0DU,IAA1D,EAAiE;MAAET,OAAO,EAAEL,MAAX;MAAmBM,eAAe,EAAE;IAApC,CAAjE,CAAP;EACD;;EAEIU,aAAa,CAACF,IAAD,EAAW;IAAA;;IAAA;MAC3B,MAAMd,MAAM,GAAG,IAAIL,WAAJ,GAAkBM,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAf;MACA,OAAOgB,KAAK,EAAErB,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAI,CAACC,GAAhC,GAAsC,iBAAtC,GAA0DU,IAAI,CAACI,IAA/D,EAAsE;QAAEb,OAAO,EAAEL,MAAX;QAAmBM,eAAe,EAAE;MAApC,CAAxE,EAAZ;MACA,OAAO,KAAI,CAACP,UAAL,CAAgBa,GAAhB,CAAoBhB,WAAW,CAACO,MAAZ,GAAqB,GAArB,GAA2B,KAAI,CAACC,GAAhC,GAAsC,iBAAtC,GAA0DU,IAAI,CAACI,IAAnF,EAA0F;QAAEb,OAAO,EAAEL,MAAX;QAAmBM,eAAe,EAAE;MAApC,CAA1F,CAAP;IAH2B;EAI5B;;AA5BqB;;;mBAAXT,aAAWsB;AAAA;;;SAAXtB;EAAWuB,SAAXvB,WAAW;EAAAwB,YAHV","names":["HttpHeaders","environment","UserService","constructor","httpClient","header","set","post","apiUrl","url","headers","withCredentials","LoginWithGoogle","credentials","JSON","stringify","GetCurrentUser","get","UpdateUser","user","put","GetUserByName","fetch","name","i0","factory","providedIn"],"sourceRoot":"","sources":["/home/dylanh/Documents/CodeProjects/Flashcards/ClientApp/src/app/services/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n  private url = \"User\";\n  constructor(private httpClient: HttpClient) { }\n\n  signOutExternal = () => {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.post(environment.apiUrl + \"/\" + this.url + \"/Logout\" , { headers: header, withCredentials: true });\n  }\n\n  LoginWithGoogle(credentials: string): Observable<any> {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.post(environment.apiUrl + \"/\" + this.url + \"/LoginWithGoogle\" , JSON.stringify(credentials), { headers: header, withCredentials: true });\n  }\n\n  GetCurrentUser(): Observable<any> {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.get(environment.apiUrl + \"/\" + this.url + \"/GetCurrentUser\" , { headers: header, withCredentials: true });\n  }\n\n  UpdateUser(user: User): Observable<any> {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return this.httpClient.put(environment.apiUrl + \"/\" + this.url , user,  { headers: header, withCredentials: true });\n  }\n\n async GetUserByName(user: User): Observable<any> {\n    const header = new HttpHeaders().set(\"Content-type\", \"application/json\");\n    return fetch((environment.apiUrl + \"/\" + this.url + \"/GetUserByName/\" + user.name,  { headers: header, withCredentials: true }))\n    return this.httpClient.get(environment.apiUrl + \"/\" + this.url + \"/GetUserByName/\" + user.name,  { headers: header, withCredentials: true });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}